/*!
 *
 *   probaclick - Do something when someone is probably going to click something.
 *   Author: Alex MacArthur
 *   Version: v1.1.1
 *   URL: https://github.com/alexmacarthur/probaclick#readme
 *   License: MIT
 *
 */
!(function(e, t) {
  "object" == typeof exports && "object" == typeof module
    ? (module.exports = t())
    : "function" == typeof define && define.amd
    ? define([], t)
    : "object" == typeof exports
    ? (exports.ProbaClick = t())
    : (e.ProbaClick = t());
})(this, function() {
  return (function(e) {
    var t = {};
    function i(n) {
      if (t[n]) return t[n].exports;
      var r = (t[n] = { i: n, l: !1, exports: {} });
      return e[n].call(r.exports, r, r.exports, i), (r.l = !0), r.exports;
    }
    return (
      (i.m = e),
      (i.c = t),
      (i.d = function(e, t, n) {
        i.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: n });
      }),
      (i.r = function(e) {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      (i.t = function(e, t) {
        if ((1 & t && (e = i(e)), 8 & t)) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var n = Object.create(null);
        if (
          (i.r(n),
          Object.defineProperty(n, "default", { enumerable: !0, value: e }),
          2 & t && "string" != typeof e)
        )
          for (var r in e)
            i.d(
              n,
              r,
              function(t) {
                return e[t];
              }.bind(null, r)
            );
        return n;
      }),
      (i.n = function(e) {
        var t =
          e && e.__esModule
            ? function() {
                return e.default;
              }
            : function() {
                return e;
              };
        return i.d(t, "a", t), t;
      }),
      (i.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (i.p = ""),
      i((i.s = 0))
    );
  })([
    function(e, t, i) {
      "use strict";
      function n(e, t) {
        for (var i = 0; i < t.length; i++) {
          var n = t[i];
          (n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            "value" in n && (n.writable = !0),
            Object.defineProperty(e, n.key, n);
        }
      }
      i.r(t);
      var r = (function() {
        function e(t) {
          var i =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {},
            n = i.max,
            r = i.delay,
            o = i.callback,
            s = i.count;
          !(function(e, t) {
            if (!(e instanceof t))
              throw new TypeError("Cannot call a class as a function");
          })(this, e),
            (this.max = n),
            (this.link = t),
            (this.callback = o),
            (this.triggers = { delay: r, count: s }),
            (this.hasJustFired = !1),
            (this.totalFireCount = 0),
            (this.hoverStart = 0),
            (this.timeout = null),
            (this.store = { time: 0, interactions: 0 }),
            (this.eventHandlers = {
              mouseover: this.handleMouseOver.bind(this),
              mouseleave: this.handleMouseLeave.bind(this)
            }),
            this.updateListeners("add");
        }
        var t, i, r;
        return (
          (t = e),
          (i = [
            {
              key: "handleMouseOver",
              value: function() {
                (this.hasJustFired = !1),
                  (this.hoverStart = Date.now()),
                  this.store.interactions++,
                  this.maybeFireBasedOnCount() || this.maybeFireBasedOnTime();
              }
            },
            {
              key: "maybeFireBasedOnCount",
              value: function() {
                return (
                  null !== this.triggers.count &&
                  (this.store.interactions >= this.triggers.count &&
                    (this.fire(), !0))
                );
              }
            },
            {
              key: "maybeFireBasedOnTime",
              value: function() {
                var e = this;
                return (
                  null !== this.triggers.delay &&
                  ((this.timeout = setTimeout(function() {
                    e.fire();
                  }, this.triggers.delay - this.store.time)),
                  this.timeout)
                );
              }
            },
            {
              key: "fire",
              value: function() {
                this.callback(this.link),
                  this.totalFireCount++,
                  this.resetStore(),
                  (this.hasJustFired = !0),
                  null !== this.max &&
                    this.totalFireCount >= this.max &&
                    this.updateListeners("remove");
              }
            },
            {
              key: "handleMouseLeave",
              value: function() {
                clearTimeout(this.timeout),
                  this.hasJustFired || this.updateStoreTime();
              }
            },
            {
              key: "updateListeners",
              value: function(e) {
                for (var t in this.eventHandlers)
                  this.link["".concat(e, "EventListener")](
                    t,
                    this.eventHandlers[t]
                  );
              }
            },
            {
              key: "resetStore",
              value: function() {
                this.store = { time: 0, interactions: 0 };
              }
            },
            {
              key: "updateStoreTime",
              value: function() {
                this.store.time =
                  this.store.time + (Date.now() - this.hoverStart);
              }
            }
          ]) && n(t.prototype, i),
          r && n(t, r),
          e
        );
      })();
      t.default = function(e) {
        var t,
          i =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          n = i.max,
          o = void 0 === n ? null : n,
          s = i.delay,
          a = void 0 === s ? 500 : s,
          u = i.count,
          l = void 0 === u ? null : u,
          c = i.callback,
          h = void 0 === c ? function() {} : c;
        return (
          "string" == typeof (t = e)
            ? (t = document.querySelectorAll(t))
            : t instanceof NodeList || (t = [t]),
          (e = [].slice.call(t)).length
            ? e.map(function(e) {
                return new r(e, { delay: a, callback: h, max: o, count: l });
              })
            : []
        );
      };
    }
  ]).default;
});
